# Run Tomcat as this user ID. Not setting this or leaving it blank will use the
# default of tomcat55.
#TOMCAT5_USER=tomcat55
TOMCAT5_USER=tomcat55

# The home directory of the Java development kit (JDK). You need at least
# JDK version 1.4. If JAVA_HOME is not set, some common directories for 
# the Sun JDK, various J2SE 1.4 versions, and the free runtimes
# java-gcj-compat-dev and kaffe are tried.
#JAVA_HOME=/usr/lib/jvm/java-6-sun
JAVA_HOME=/usr/lib/jvm/java-6-sun

# Directory for per-instance configuration files and webapps. It contain the
# directories conf, logs, webapps, work and temp. See RUNNING.txt for details.
# Default: /var/lib/tomcat5.5
#CATALINA_BASE=/var/lib/tomcat5.5
CATALINA_BASE=/var/lib/tomcat5.5

# Arguments to pass to the Java virtual machine (JVM).
#JAVA_OPTS="-Djava.awt.headless=true -Xmx128M"
#JAVA_OPTS="-Djava.awt.headless=true -Xmx1024M"
#JAVA_OPTS="-Djava.awt.headless=true -Xmx512M"
JAVA_OPTS="-Djava.awt.headless=true -Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=1000M"

# Java compiler to use for translating JavaServer Pages (JSPs). You can use all
# compilers that are accepted by Ant's build.compiler property.
#JSP_COMPILER=jikes

# Use the Java security manager? (yes/no, default: yes)
# WARNING: Do not disable the security manager unless you understand
# the consequences!
# NOTE: java-gcj-compat-dev currently doesn't support a security
# manager. 
#TOMCAT5_SECURITY=yes
TOMCAT5_SECURITY=no

# Added for Fedora Commons repository
FEDORA_HOME=/var/lib/fedora
export FEDORA_HOME

PATH=${PATH}:${FEDORA_HOME}/server/bin

#### added for adore-djatoka support 20081226.110907 - start #### 
DJATOKA_HOME="/var/lib/adore-djatoka"
LAUNCHDIR=/bin
LIBPATH=$DJATOKA_HOME/lib

if [ `uname` = 'Linux' ] ; then
  if [ `uname -p` = "x86_64" ] ; then
    # Assume Linux AMD 64 has 64-bit Java
    PLATFORM="Linux-x86-64"
    LD_LIBRARY_PATH="$LIBPATH/$PLATFORM"
    KAKADU_LIBRARY_PATH="-DLD_LIBRARY_PATH=$LIBPATH/$PLATFORM"
  else
    # 32-bit Java
    PLATFORM="Linux-x86-32"
    LD_LIBRARY_PATH="$LIBPATH/$PLATFORM"
    KAKADU_LIBRARY_PATH="-DLD_LIBRARY_PATH=$LIBPATH/$PLATFORM"
  fi
elif [ `uname` = 'Darwin' ] ; then
  # Mac OS X
  PLATFORM="Mac-x86"
  export PATH="/System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home/bin:$PATH"
  export DYLD_LIBRARY_PATH="$LIBPATH/$PLATFORM"
  KAKADU_LIBRARY_PATH="-DDYLD_LIBRARY_PATH=$LIBPATH/$PLATFORM"
elif [ `uname` = 'SunOS' ] ; then
  PLATFORM="Solaris-Sparc"
  LD_LIBRARY_PATH="$LIBPATH/$PLATFORM:$LD_LIBRARY_PATH"
  export LD_LIBRARY_PATH
else
  echo "djatoka env: Unsupported platform: `uname`"
  exit
fi

KAKADU_HOME=$DJATOKA_HOME/bin/$PLATFORM
cd $LAUNCHDIR
for line in `ls -1 $LIBPATH | grep '.jar'`
  do
  classpath="$classpath:$LIBPATH/$line"
done
#DEBUG="-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"
CLASSPATH=.:../build/:$classpath
JAVA_OPTS="$DEBUG -Djava.awt.headless=true  -Xmx1024M -Xms256M -Dkakadu.home=$KAKADU_HOME -Djava.library.path=$LIBPATH/$PLATFORM $KAKADU_LIBRARY_PATH"

# If a proxy server is used in your env... set the following
#proxySet=true
#proxyPort=8080
#proxyHost=proxyout.lanl.gov
#JAVA_OPTS="$JAVA_OPTS -DproxySet=$proxySet -DproxyPort=$proxyPort -DproxyHost=$proxyHost"#### added for adore-djatoka support - end #### 
#
# to change temp directory
#JAVA_OPTS="-Djava.io.tmpdir="${CATALINA_HOME}/temp""
