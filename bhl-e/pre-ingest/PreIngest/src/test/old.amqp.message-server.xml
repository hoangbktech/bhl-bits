<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:si="http://www.springframework.org/schema/integration"
	xmlns:stream="http://www.springframework.org/schema/integration/stream"
	xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://activemq.apache.org/schema/core 
		http://activemq.apache.org/schema/core/activemq-core.xsd
		http://www.springframework.org/schema/integration/stream 
        http://www.springframework.org/schema/integration/stream/spring-integration-stream-2.0.xsd
        http://www.springframework.org/schema/integration 
        http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/integration/jms
        http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd">

	<!-- Init and start and embedded ActiveMQ broker -->
	<amq:broker useJmx="true" persistent="true" brokerName="sisyphus"
		dataDirectory="C:/ProjectData/BHL-Tests/activemq-data/" id="broker">
		<amq:transportConnectors>
			<amq:transportConnector uri="tcp://localhost:61616" />
			<amq:transportConnector name="stomp"
				uri="stomp://localhost:61613" />
		</amq:transportConnectors>
	</amq:broker>

	<amq:queue id="destination"
		physicalName="org.apache.activemq.spring.Test.spring.embedded" />

	<!-- Define which connectionFactory is used by the broker -->
	<amq:connectionFactory id="jmsFactory" brokerURL="tcp://127.0.0.1:61616" />
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<property name="targetConnectionFactory" ref="jmsFactory" />
	</bean>

	<!-- Necessary to use e.g. @Publisher, @ServiceActivator -->
	<si:annotation-config default-publisher-channel="default" />
	<si:channel id="default" />

	<!-- GateWayProxy to kick-off processing of DigitalObjects -->
	<si:gateway id="digitalObjectService" service-interface="at.co.ait.domain.IPrepDigObjGateway"
		default-request-channel="extractTechnicalMetadata" />

	<!-- GateWayProxy to send request for virusscan job -->
	<si:gateway id="virusscanRequestService" service-interface="at.co.ait.domain.IReqVirusscanGateway"
		default-request-channel="virusscanRequest" default-reply-channel="virusscanResponse" />

	<!-- GateWayProxy to send request for virusscan job -->
	<si:gateway id="identifierRequestService" service-interface="at.co.ait.domain.IRegNoidGateway"
		default-request-channel="identifierRequest" />

	<!-- Define a stdout channel for debugging purposes -->
	<si:channel id="out" />
	<stream:stdout-channel-adapter id="stdout"
		channel="out" append-newline="true" />

	<!-- Use a channel adapter to send identifier requests -->
	<si:channel id="identifierRequest" />
	<jms:outbound-gateway request-destination="amq_identifierRequest"
		request-channel="identifierRequest" reply-channel="out" />
	<amq:queue id="amq_identifierRequest" physicalName="identifierResponse" />

	<amq:queue id="amq_identifierResponse" physicalName="identifierResponse" />
	<si:channel id="identifierResponse" />

	<!-- Use a channel adapter to send virusscan requests -->
	<si:channel id="virusscanRequest" />
	<jms:outbound-channel-adapter id="jms_virusscanRequest"
		channel="virusscanRequest" destination="amq_virusscanRequest" />
	<amq:queue id="amq_virusscanRequest" physicalName="virusscanRequest" />

	<!-- Use a channel adapter to receive virusscan responses -->
	<amq:queue id="amq_virusscanResponse" physicalName="virusscanResponse" />
	<jms:message-driven-channel-adapter
		id="jms_virusscanResponse" channel="virusscanResponse" destination="amq_virusscanResponse" 
		error-channel="out" />
	<si:channel id="virusscanResponse" />

	<!-- Extract technical metadata from DigitalObject -->
	<si:service-activator input-channel="extractTechnicalMetadata"
		output-channel="out" method="enrichDigitalObject" ref="technicalMetadataExtractor" />
	<bean id="technicalMetadataExtractor" class="at.co.ait.domain.TechMetadataExtractionService" />

</beans>



