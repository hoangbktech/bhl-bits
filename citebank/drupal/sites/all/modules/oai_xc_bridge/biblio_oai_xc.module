<?php
// $Id: biblio_oai_xc.module,v 1.1.2.2 2010/01/26 01:55:08 rjerome Exp $
/*
 * @file biblio_oai_xc.module
 *
 */

// modified DLH 2010/07/26 for compatibility for OAI bridge to work with 6.x-1-x version of the Biblio module.

// Publication Types
if (!defined(PUBLICATION_TYPE_BOOK)) {
	define('PUBLICATION_TYPE_BOOK', 100);
	define('PUBLICATION_TYPE_ARTICLE', 102);
	define('PUBLICATION_TYPE_JOURNAL', 1000);
}

/*
 *  logmsg - write to logs
 */
function logmsg($msg, $type = 'biblio oai xc')
{
	;//log_info($type, $msg);
}

/*
 *  biblio_oai_xc_biblio_import_options - 
 *   add the marc option to the option list of the biblio_import_form
 *   the key is the module name use by module_invoke to call hook_biblio_import
 *   module_invoke('biblio_oai_xc', 'biblio_import',...)
 */
function biblio_oai_xc_biblio_import_options() 
{
	logmsg('biblio_oai_xc_biblio_import_options');

  return array('biblio_oai_xc' => t('MARC'));
}

/*
 *  biblio_oai_xc_nodeapi - 
 */
function biblio_oai_xc_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) 
{
	logmsg('biblio_oai_xc_nodeapi:' . $op . ' node:[' . print_r($node, true) . ']');

	$nodeType = $node->type;
	logmsg('biblio_oai_xc_nodeapi:***[' . $nodeType . ']***');

  if ($nodeType != 'biblio') {
  	return;
	}
	
  $callback = '_biblio_oai_xc_'. str_replace(' ', '_', $op);

	logmsg('biblio_oai_xc_nodeapi:' . $op . ' callback:' . $callback);

  if (function_exists($callback)) {
    return $callback($node, $a3, $a4);
  }
  
  return;
}

/*
 *  _biblio_oai_xc_delete - 
 */
function _biblio_oai_xc_delete($node) 
{
	logmsg('_biblio_oai_xc_delete');
  db_query('DELETE FROM {biblio_oai_xc} WHERE nid = %d', $node['nid']);
}

/*
 *  _biblio_oai_xc_view - 
 */
function _biblio_oai_xc_view($node) 
{
	logmsg('_biblio_oai_xc_view');
}

/*
 *  _biblio_oai_xc_update - 
 */
function _biblio_oai_xc_update($node) 
{
	logmsg('_biblio_oai_xc_update');
}

/*
 *  _biblio_oai_xc_insert - 
 */
function _biblio_oai_xc_insert($node) 
{
	$biblio_md5_orig = $node->biblio_md5;
	$biblio_url = $node->biblio_url;
	$nid        = $node->nid;

	logmsg('_biblio_oai_xc_insert: ' . $biblio_md5);

  if (!isset($biblio_md5)) {
  	return;
  }

  // flag: true = insert, false update or ignore
  $flagInsert = true;

  // See if we already have an entry for this item
	$biblio_md5 = md5($biblio_url);
	$isRecordFlag = biblio_oai_xc_isRecord($biblio_url);

	if ($isRecordFlag) { // it is a duplicate
		// Retrieve the existing node so that we can do an update instead of an insert
		logmsg('nid:[' . $nid . '] url:[' . $biblio_url . '] md5:' . $biblio_md5 . ' orig md5:' . $biblio_md5_orig, 'Record dup');
		$flagInsert = false;
	}

  // if we have a nid (node ID), then record already exists
  if ($nid > 0) {
  	$flagInsert = false;
  }
  
  // if new record, save it, else skip it
  if ($flagInsert) {
  	logmsg('Insert new record: ' . $biblio_md5, 'biblio oai xc Insert Callback');
  	drupal_write_record('biblio', $node);
  } else {
  	logmsg('Skip existing: ' . $biblio_md5, 'biblio oai xc Insert Callback');
  }
}

/*
 *  biblio_oai_xc_oaiharvester_process_record - 
 */
function biblio_oai_xc_oaiharvester_process_record($record) 
{
	logmsg('biblio_oai_xc_oaiharvester_process_record');

  module_load_include('inc', 'biblio', 'biblio.import.export');

  $raw = $record['metadata']['childNode'];
  $format = $raw->localName;
  
  // error_log('format = ' . $format, 0);
  switch ($format)
  {
		case 'dc':
			biblio_oai_xc_oaiharvester_process_record_oai_dc($record);
			break;

		case 'mods':
			biblio_oai_xc_oaiharvester_process_record_mods($record);
			break;

		// MARC21
//		case 'marc':
//			biblio_oai_xc_oaiharvester_process_record_marc($record);
//			break;
  }
  
  return;
}

/*
 *	biblio_oai_xc_oaiharvester_process_record_oai_dc - Harvest records that use the oai_dc metadata format
 */
function biblio_oai_xc_oaiharvester_process_record_oai_dc($record)
{
	$updateFlag = false;  // are we an insert or update?  if true then is an update

	logmsg('biblio_oai_xc_oaiharvester_process_record_oai_dc');

  $raw = $record['metadata']['childNode'];

	logmsg('biblio_oai_xc_oaiharvester_process_record_oai_dc');
  
  // Get the unique URL (identifier) for the item
  $identifiers = $raw->getElementsByTagName('identifier');

  foreach ($identifiers as $identifier) {
		if (filter_var($identifier->nodeValue, FILTER_VALIDATE_URL)) {
			$biblio_url = $identifier->nodeValue;
			break;
		}
  }  

  // See if we already have an entry for this item
	$biblio_md5 = md5($biblio_url);
	$isRecordFlag = biblio_oai_xc_isRecord($biblio_url);

	if ($isRecordFlag) { // it is a duplicate
		// Retrieve the existing node so that we can do an update instead of an insert
		//logmsg('url:[' . $biblio_url . '] md5:' . $biblio_md5, 'Record dup');
		$updateFlag = true;
	}
  
  // Fill in the updated information  
  $node['title']            = $raw->getElementsByTagName('title')->item(0)->nodeValue;
  $node['biblio_url']       = $biblio_url;
  $node['biblio_publisher'] = $raw->getElementsByTagName('publisher')->item(0)->nodeValue;
  $node['biblio_year']      = $raw->getElementsByTagName('date')->item(0)->nodeValue;
  $node['biblio_lang']      = $raw->getElementsByTagName('language')->item(0)->nodeValue;

  $creators = $raw->getElementsByTagName('creator');
  $node['biblio_contributors'] = array();

  foreach ($creators as $creator) {
    $node['biblio_contributors'][1][] = array('name' => $creator->nodeValue, 'auth_type' => 1);
  }

  $subjects = $raw->getElementsByTagName('subject');
  $node['biblio_keywords'] = array();

  foreach ($subjects as $subject) {
		$keywords = explode(";", $subject->nodeValue);

		foreach ($keywords as $keyword) {
			$node['biblio_keywords'][] = $keyword;
			//$node->biblio_keywords[]= $subject->nodeValue;
		}
  }

  // Check whether one of the types specific in the OAI feed match a Biblio Type
  $types = $raw->getElementsByTagName('type');

  foreach ($types as $type) {
  	// if find a type, assign it, and done
  	if ($node['biblio_type'] = biblio_oai_xc_gettypeid($type->nodeValue)) {
			break;
		}
  }
  
  if (empty($node['biblio_type'])) {
		$node['biblio_type'] = 100;	// No matches in the feed, so default to "Book"
  }
  
  if (!empty($biblio_url)) {
		$node['biblio_md5'] = md5($biblio_url);
  } else {
		$node['biblio_md5'] = md5(serialize($node));
  }

  if (!empty($node)) {
    if ($updateFlag == false) {  // do a regular insert via the other calls...
	    biblio_save_node($node);
    } else {
    	// else it's an update, set the nid and maybe the revision.
    	$fields = biblio_oai_xc_getNid($biblio_url);
    	if ($fields) {
    		$nid = $fields['nid'];
    		$vid = $fields['vid'];
    	}

    	if ($nid) {
    		$node['nid'] = $nid;
    	}

    	// if no vid, set it to the vid from the lookup: biblio_oai_xc_getNid
    	if ($node['vid'] == 0) {
    		$node['vid'] = $vid;
    	}

    	//logmsg('UPDATE nid:[' . $nodeObj->nid . '] nidA:[' . $node['nid'] . '] url:' . $biblio_url, 'DC Record UPDATE');
    	biblio_save_node($node);
    }
  }

  return;
}

/*
-Publication Type
-Date Published
-Year of Publication
-Journal Title
-Authors & Secondary Authors
-Publisher
-Keywords
-Edition


Publication Type
	biblio_type      '/x:mods/x:genre'
		book    100
		series  100 (book)
		article 102 
		default 100 (book)

Date Published

Year of Publication
	biblio_year
	biblio_date
	
Journal Title
	

Authors
	biblio_contributors
	
Secondary Authors

Publisher
	biblio_publisher
	
Keywords           /x:mods/x:subject
	biblio_keywords
	
Edition
	biblio_edition

*/

/*
 *	biblio_oai_xc_oaiharvester_process_record_mods - Harvest records that use the mods metadata format
 */
function biblio_oai_xc_oaiharvester_process_record_mods($record)
{
/*
	list of important data fields (conceptual name)

	// BIBLIO_FIELD_TOPIC: Publication Type
	// BIBLIO_FIELD_TOPIC: Date Published
	// BIBLIO_FIELD_TOPIC: Year of Publication
	// BIBLIO_FIELD_TOPIC: Journal Title
	// BIBLIO_FIELD_TOPIC: Authors
	// BIBLIO_FIELD_TOPIC: Secondary Authors
	// BIBLIO_FIELD_TOPIC: Publisher
	// BIBLIO_FIELD_TOPIC: Keywords
	// BIBLIO_FIELD_TOPIC: Edition

*/

	$updateFlag = false;  // are we an insert or update?  if true then is an update
	
  $raw = $record['metadata']['childNode'];

	logmsg('biblio_oai_xc_oaiharvester_process_record_mods');
	//logmsg('record' . print_r($record, true));

  // Set up an XPath document
  $doc = new DOMDocument;
  $doc->appendChild($doc->importNode($raw, true));
  $xpath = new DOMXPath($doc);
  $xpath->registerNamespace('x', 'http://www.loc.gov/mods/v3');
  
//  // MODS DATA PARSER parse data
//  $strdoc = $doc->saveXML();
//  logmsg('record: ' . $strdoc, 'STRDOC');
//  $strxml = str_replace('mods:', '', $strdoc);
//  $xml = simplexml_load_string($strxml);
//  logmsg('title:' . $xml->titleInfo->title, 'XMLSTR');
//  
//  logmsg('url:' . $xml->identifier, 'XMLSTR');
//  
//  foreach ($xml->subject as $subject) {
//  	$subjects .= $subject->topic . ',';
//  }
//  $subjects = rtrim($subjects, ',');
//  logmsg('subjects:' . $subjects, 'XMLSTR');
//  
//  // create a new function, hand it the xml string, parse the data, put into an array: biblio['title'] = $xml->titleInfo->title;  ...etc

	// BIBLIO_FIELD: url
	// BIBLIO_FIELD: isbn
	// BIBLIO_FIELD: issn
  // Read any identifiers for the item
  $identifiers = $xpath->query('/x:mods/x:identifier');

  foreach ($identifiers as $identifier) {

		if ($identifier->hasAttribute('type')) {

			switch ($identifier->getAttribute('type'))
			{
				case 'uri':
					$biblio_url = $identifier->nodeValue;
					break;

				case 'isbn':
					$biblio_isbn = $identifier->nodeValue;
					break;

				case 'issn':
					$biblio_issn = $identifier->nodeValue;
					break;
			}			
		}
  }  
  
  // See if there is a 'url' element (let this take precedence over any 'uri' identifiers)
  $urls = $xpath->query('/x:mods/x:location/x:url');

  if ($urls->length > 0) {
		$biblio_url = $urls->item(0)->nodeValue;
  }  

  // See if we already have an entry for this item
	$biblio_md5 = md5($biblio_url);
	$isRecordFlag = biblio_oai_xc_isRecord($biblio_url);

	if ($isRecordFlag) { // it is a duplicate
		// Retrieve the existing node so that we can do an update instead of an insert
		logmsg('url:[' . $biblio_url . '] md5:' . $biblio_md5, 'Record dup');

		$updateFlag = true;
	}

  // Add the identifiers to the node
  $node['biblio_url']  = $biblio_url;
  $node['biblio_isbn'] = $biblio_isbn;
  $node['biblio_issn'] = $biblio_issn;

  // Get the title information
  $titleInfoList = $xpath->query('/x:mods/x:titleInfo');
  
	// BIBLIO_FIELD_TOPIC: Journal Title
	// BIBLIO_FIELD: title
  foreach ($titleInfoList as $titleInfo) {
		// Only use titles that apply to MARC 245a/b/n/p by ignoring any with the 'type' attribute

		if (!$titleInfo->hasAttribute('type')) {
			$node['title'] = '';
			$nonSort = $titleInfo->getElementsByTagName('nonSort');
			
			if ($nonSort->length > 0) {
				$node['title'] = $nonSort->item(0)->nodeValue . ' ';
			}
			
			$title = $titleInfo->getElementsByTagName('title');
			
			if ($title->length > 0) {
				$node['title'] = $node['title'] . $title->item(0)->nodeValue;
			}
			
			$subTitle = $titleInfo->getElementsByTagName('subTitle');
			
			if ($subTitle->length > 0) {
				$node['title'] = $node['title'] . ' ' . $subTitle->item(0)->nodeValue;
			}
		}
  }
  
	// BIBLIO_FIELD_TOPIC: Publisher
	// BIBLIO_FIELD: place_published
	// BIBLIO_FIELD: publisher
  // Get the publishing information
  $originInfo = $xpath->query('/x:mods/x:originInfo');

  foreach ($originInfo as $origin) {
  	$node['biblio_place_published'] = '';
		$places = $origin->getElementsByTagName('place');
		
		foreach ($places as $place) {
			$placeTerm = $place->getElementsByTagName('placeTerm')->item(0);

			if ($placeTerm->getAttribute('type') == 'text') {
				$node['biblio_place_published'] = $placeTerm->nodeValue;
				break;
			}
		}
		
		$node['biblio_publisher'] = $origin->getElementsByTagName('publisher')->item(0)->nodeValue;
  }
  
  // Get the date information
  $node['biblio_year'] = 9999;
  $node['biblio_date'] = '';

	// BIBLIO_FIELD_TOPIC: Date Published
	// BIBLIO_FIELD_TOPIC: Year of Publication
	// BIBLIO_FIELD: year
	// BIBLIO_FIELD: date
  $dates = $xpath->query('/x:mods/x:originInfo/x:dateIssued');

  if ($dates->length > 0) {
		//$dates = $origin->getElementsByTagName('dateIssued');

		foreach ($dates as $date) {

			if (!$date->hasAttribute('encoding')) {
				$node['biblio_date'] = $date->nodeValue;
			} elseif ($date->getAttribute('encoding') == 'iso8601') {
				$node['biblio_date'] = $date->nodeValue;
			} elseif ($date->getAttribute('encoding') == 'marc') {

				if (!$date->hasAttribute('point')) {
					$node['biblio_year'] = $date->nodeValue;
				} elseif ($date->getAttribute('point') == 'start') {
					$node['biblio_year'] = $date->nodeValue;
				}
			}		
		}
  }
  
	// BIBLIO_FIELD: lang
  // Get the language
  $languageElement = $xpath->query('/x:mods/x:language');

  if ($languageElement->length > 0) {
		$languageTerms = $languageElement->item(0)->getElementsByTagName('languageTerm');
	
		if ($languageTerms->length > 0) {
			$node['biblio_lang'] = $languageTerms->item(0)->nodeValue;
		}
	}  

	// BIBLIO_FIELD_TOPIC: Authors
	// BIBLIO_FIELD_TOPIC: Secondary Authors
	// BIBLIO_FIELD: contributors, authors
  // Get the authors
  $node['biblio_contributors'] = array();
  $names = $xpath->query('/x:mods/x:name');

  foreach($names as $name) {
		// get the type of author
		$auth_type = 1;	// match to row in table 'biblio_contributor_type_data'

		if ($name->hasAttribute('type')) {
			
			switch ($name->getAttribute('type')) 
			{
				case 'personal':
					$auth_type = 1;
					break;
				
				case 'corporate':
					$auth_type = 5;
					break;
				
				case 'conference':
					$auth_type = 19;
					break;		
			}
		}
	
		// get the name of the author
		$nameParts  = $name->getElementsByTagName('namePart');
		$authorName = '';
		$given      = '';
		$family     = '';
		$authorDate = '';

		foreach ($nameParts as $namePart) {

			if (!$namePart->hasAttribute('type')) {
				$authorName = $namePart->nodeValue;
				break;
			} else {
				
				switch($namePart->getAttribute('type'))
				{
					case 'given':
						$given = $namePart->nodeValue;
						break;

					case 'family':
						$family = $namePart->nodeValue;
						break;

					case 'date':
						$authorDate = $namePart->nodeValue;
						break;			
				}
			}	
		} 
		
		if ($authorName == '') {
			$authorName = $family . ', ' . $given . ' ' . $authorDate;
		}
		
		// add the author to the node
    $node['biblio_contributors'][1][] = array('name' => $authorName, 'auth_type' => $auth_type);
  }  
  
	// BIBLIO_FIELD_TOPIC: Keywords
	// BIBLIO_FIELD: keywords
  // Get the subjects (keywords)
  $node['biblio_keywords'] = array();
  $subjects = $xpath->query('/x:mods/x:subject');

  foreach ($subjects as $subject) {
		$topics = $subject->getElementsByTagName('topic');
		
		foreach ($topics as $topic) {
			$node['biblio_keywords'][] = $topic->nodeValue;
		}

		$names = $subject->getElementsByTagName('name');

		foreach ($names as $name) {
			$node['biblio_keywords'][] = $name->nodeValue;
		}

		$geographics = $subject->getElementsByTagName('geographic');

		foreach ($geographics as $geographic) {
			$node['biblio_keywords'][] = $geographic->nodeValue;
		}
  }  
  
	// BIBLIO_FIELD: call_number (classification)
  // Look for a call number in the item's classification entries
  $classifications = $xpath->query('/x:mods/x:classification');

  foreach ($classifications as $classification) {

		if ($classification->hasAttribute('authority')) {

			if ($classification->getAttribute('authority') == 'lcc') {
				$node['biblio_call_number'] = $classification->nodeValue;
				break;
			}			
		}
  }  
  
	// BIBLIO_FIELD_TOPIC: Publication Type
	// BIBLIO_FIELD: type (book, article, journal)
  // Identify the type of item
  $genres = $xpath->query('/x:mods/x:genre');

  if ($genres->length > 0) {

		switch (strtolower($genres->item(0)->nodeValue))
		{
			case 'book':
				$node['biblio_type'] = PUBLICATION_TYPE_BOOK;	// book
				break;

			case 'series':
				$node['biblio_type'] = PUBLICATION_TYPE_BOOK;	// book
				break;

			case 'article':
				$node['biblio_type'] = PUBLICATION_TYPE_ARTICLE;	// article
				break;

			case 'journal':
				$node['biblio_type'] = PUBLICATION_TYPE_JOURNAL;	// journal
				break;

			default:
				$node['biblio_type'] = PUBLICATION_TYPE_BOOK;	// book
				break;
		}  
  }

  if (empty($node['biblio_type'])) {
  	$node['biblio_type'] = PUBLICATION_TYPE_BOOK;	// No matches in the feed, so default to "Book"
  }
  
	// BIBLIO_FIELD_TOPIC: Journal Title
	// articles
	// BIBLIO_FIELD: secondary_title
	// BIBLIO_FIELD: volume
	// BIBLIO_FIELD: issue
	// BIBLIO_FIELD: section
	// BIBLIO_FIELD: pages
	// BIBLIO_FIELD: year
  // Check for page and volume information for journals
  $relatedItems = $xpath->query('/x:mods/x:relatedItem');

  foreach ($relatedItems as $relatedItem) {

		if ($relatedItem->getAttribute('type') == 'host' && $node['biblio_type'] == PUBLICATION_TYPE_ARTICLE) {
			// Get journal title
			$journalTitleInfo = $relatedItem->getElementsByTagName('titleInfo');

			if ($journalTitleInfo->length > 0) {
				$node['biblio_secondary_title'] = $journalTitleInfo->item(0)->getElementsByTagName('title')->item(0)->nodeValue;		
			}
		
			// Get volume/issue/pages
			$parts = $relatedItem->getElementsByTagName('part');

			if ($parts->length > 0) {
				$part = $parts->item(0);
				
				$details = $part->getElementsByTagName('detail');
				$text = $part->getElementsByTagName('text');

				if ($details->length > 0) {

					foreach ($details as $detail) {
						$number = $detail->getElementsByTagName('number')->item(0)->nodeValue;
						
						if (!empty($number)) {

							switch($detail->getAttribute('type'))
							{
								case 'volume':
									$node['biblio_volume'] = $number;
									break;

								case 'issue':
									$node['biblio_issue'] = $number;
									break;
							}
						}
					}
				} else {
					$node['biblio_volume'] = $text->item(0)->nodeValue;
				}
				
				$extents = $part->getElementsByTagName('extent');

				if ($extents->length > 0) {
					$node['biblio_section'] = $extents->item(0)->getElementsByTagName('start')->item(0)->nodeValue;
					$node['biblio_pages'] = $extents->item(0)->getElementsByTagName('list')->item(0)->nodeValue;
				}
				
				$partDates = $part->getElementsByTagName('date');
				if ($partDates->length > 0) {
					$node['biblio_year'] = $partDates->item(0)->nodeValue;
				}
			}
		}
  }

	// BIBLIO_FIELD_TOPIC: Edition
	// BIBLIO_FIELD: Edition:  originInfo   edition
  $bookEditionItems = $xpath->query('/x:mods/x:originInfo');
  $articleEditionItems = $xpath->query('/x:mods/x:classificationType');
  
	// look for book or article edition (article may be on a different branch, a second originInfo)
  switch($node['biblio_type']) 
  {
  	case PUBLICATION_TYPE_BOOK:
  	default:
  		$editionItems = $bookEditionItems;
  		break;

  	case PUBLICATION_TYPE_ARTICLE:
  		$editionItems = $articleEditionItems;
  		break;
  }

	$editionInfo = '';
	$node['biblio_edition'] = '';
	
	// extract the edition info
	if (count($editionItems > 0)) {
		foreach ($editionItems as $editionItem) {
			$editionInfo = $editionItem->getElementsByTagName('edition')->item(0)->nodeValue;
			break;
		}
	}
	
	$node['biblio_edition'] = $editionInfo;
  
  // Generate an md5 hash and save the item
  if (!empty($biblio_url)) {
		$node['biblio_md5'] = md5($biblio_url);
  } else {
		$node['biblio_md5'] = md5(serialize($node));
  }

  if (!empty($node)) {
    
    if ($updateFlag == false) {  // do a regular insert via the other calls...
    	biblio_save_node($node);
    } else {
    	// else it's an update, set the nid.
    	$fields = biblio_oai_xc_getNid($biblio_url);
    	if ($fields) {
    		$nid = $fields['nid'];
    		$vid = $fields['vid'];
    	}

    	if ($nid) {
    		$node['nid'] = $nid;
    	}

    	// if no vid, set it to the vid from the lookup: biblio_oai_xc_getNid
    	if ($node['vid'] == 0) {
    		$node['vid'] = $vid;
    	}

    	biblio_save_node($node);
    }
  }

  return;
}

function getCountNid($nid)
{
	$total = 0 ;
	
	$sql = "SELECT count(*) AS total FROM  {biblio} WHERE nid = {$nid}";
	
	db_query($sql);

  $row = db_fetch_object($result);
  
  if ($row) {
  	$total = $row->total;
  	
  	return $total;
  }

	return $total;	
}

/*
Publication Type
Date Published
Year of Publication
Journal Title
Authors
Secondary Authors
Publisher
Keywords
Edition

$publicationType, $datePublished, $yearOfPublication, $title, $authors, $secondaryAuthors, $publisher, $keywords, $edition
*/
/**
 *  addBiblioEssentialFields - map the core data 
 */
function addBiblioEssentialFields($node,
	$publicationType = PUBLICATION_TYPE_BOOK, 
	$datePublished = '', 
	$yearOfPublication = '9999', 
	$title = '', 
	$authors = '', 
	$secondaryAuthors = '', 
	$publisher = '', 
	$keywords = '', 
	$edition = '') 
{
	
  $node['biblio_title']           = $title;
	$node['biblio_publisher']       = $publisher;
  $node['biblio_year']            = $yearOfPublication;
  $node['biblio_date']            = $datePublished;

  if (is_array($authors)) {
	  $node['biblio_contributors']  = $authors;
	} else {
		$authorsArray = array();
		$authorsArray = $authors;
	  $node['biblio_contributors']  = array($authorsArray);
	}
  
  if (is_array($keywords)) {
	  $node['biblio_keywords']      = $keywords;
	} else {
		$keywordArray = array();
		$keywordArray = $keywords;
	  $node['biblio_keywords']      = array($keywordArray);
	}

  $node['biblio_type']            = $publicationType;

	
	return $node;
}


/*
 *  convertToObj - convert an array into an object
 */
function convertToObj($array) 
{
	$object->nid = $array['nid'];
	logmsg('Array ***' . print_r($array, true) . '***', 'DUMP ARRAY');
	
	$object->biblio_url  = $array['biblio_url'];
	$object->biblio_isbn  = $array['biblio_isbn'];
	$object->biblio_issn  = $array['biblio_issn'];
	$object->title  = $array['title'];
	$object->biblio_place_published  = $array['biblio_place_published'];
	$object->biblio_publisher  = $array['biblio_publisher'];
	$object->biblio_year  = $array['biblio_year'];
	$object->biblio_date  = $array['biblio_date'];
	$object->biblio_lang  = $array['biblio_lang'];
	$object->biblio_contributors  = $array['biblio_contributors'];
//	 => 
//	Array 
//	( 
//		[1] => Array 
//		( 
//			[0] => Array 
//			( 
//				[name] => Norris, James N. 
//				[auth_type] => 1 
//			) 
//		) 
//	) 
	$object->biblio_keywords  = $array['biblio_keywords'];
//	 => 
//	Array 
//	( 
//		[0] => Gulf of California 
//		[1] => Marine algae 
//		[2] => Green algae 
//		[3] => Chlorophyta 
//		[4] => Brown algae 
//		[5] => Phaeophyceae 
//	) 
	$object->biblio_type  = $array['biblio_type'];
	$object->biblio_md5  = $array['biblio_md5'];
	
/*
nid
vid
biblio_type
biblio_number
biblio_other_number
biblio_secondary_title
biblio_tertiary_title
biblio_edition
biblio_publisher
biblio_place_published
biblio_year
biblio_volume
biblio_pages
biblio_date
biblio_isbn
biblio_lang
biblio_abst_e
biblio_abst_f
biblio_full_text
biblio_url
biblio_issue
biblio_type_of_work
biblio_accession_number
biblio_call_number
biblio_notes
biblio_custom1
biblio_custom2
biblio_custom3
biblio_custom4
biblio_custom5
biblio_custom6
biblio_custom7
biblio_research_notes
biblio_number_of_volumes
biblio_short_title
biblio_alternate_title
biblio_original_publication
biblio_reprint_edition
biblio_translated_title
biblio_section
biblio_citekey
biblio_coins
biblio_doi
biblio_issn
biblio_auth_address
biblio_remote_db_name
biblio_remote_db_provider
biblio_label
biblio_access_date
biblio_refereed
biblio_md5


[biblio_url] => http://hdl.handle.net/10088/8631 
[biblio_isbn] => 
[biblio_issn] => 
[title] => Marine Algae of the Northern Gulf of California: Chlorophyta and Phaeophyceae. 
[biblio_place_published] => 
[biblio_publisher] => Smithsonian Institution Scholarly Press 
[biblio_year] => 9999 
[biblio_date] => 2010-02-16 
[biblio_lang] => en 
[biblio_contributors] => 
	Array 
	( 
		[1] => Array 
		( 
			[0] => Array 
			( 
				[name] => Norris, James N. 
				[auth_type] => 1 
			) 
		) 
	) 
[biblio_keywords] => 
	Array 
	( 
		[0] => Gulf of California 
		[1] => Marine algae 
		[2] => Green algae 
		[3] => Chlorophyta 
		[4] => Brown algae 
		[5] => Phaeophyceae 
	) 
[biblio_type] => 100 
[biblio_md5] => 124fd316ef09a89930b2a13f73c56bee 
[nid] => 14122 

*/
	
  return $object;
}

/*
 *  convertArrayToObject - convert an array into an object
 */
function convertArrayToObject($array) 
{
	$object->nid = $array['nid'];
	logmsg('Array ***' . print_r($array, true) . '***', 'DUMP ARRAY');
	
	$object->biblio_url  = $array['biblio_url'];
	$object->biblio_isbn  = $array['biblio_isbn'];
	$object->biblio_issn  = $array['biblio_issn'];
	$object->title  = $array['title'];
	$object->biblio_place_published  = $array['biblio_place_published'];
	$object->biblio_publisher  = $array['biblio_publisher'];
	$object->biblio_year  = $array['biblio_year'];
	$object->biblio_date  = $array['biblio_date'];
	$object->biblio_lang  = $array['biblio_lang'];
	$object->biblio_contributors  = $array['biblio_contributors'];
//	 => 
//	Array 
//	( 
//		[1] => Array 
//		( 
//			[0] => Array 
//			( 
//				[name] => Norris, James N. 
//				[auth_type] => 1 
//			) 
//		) 
//	) 
	$object->biblio_keywords  = $array['biblio_keywords'];
//	 => 
//	Array 
//	( 
//		[0] => Gulf of California 
//		[1] => Marine algae 
//		[2] => Green algae 
//		[3] => Chlorophyta 
//		[4] => Brown algae 
//		[5] => Phaeophyceae 
//	) 
	$object->biblio_type  = $array['biblio_type'];
	$object->biblio_md5  = $array['biblio_md5'];
	
/*
nid
vid
biblio_type
biblio_number
biblio_other_number
biblio_secondary_title
biblio_tertiary_title
biblio_edition
biblio_publisher
biblio_place_published
biblio_year
biblio_volume
biblio_pages
biblio_date
biblio_isbn
biblio_lang
biblio_abst_e
biblio_abst_f
biblio_full_text
biblio_url
biblio_issue
biblio_type_of_work
biblio_accession_number
biblio_call_number
biblio_notes
biblio_custom1
biblio_custom2
biblio_custom3
biblio_custom4
biblio_custom5
biblio_custom6
biblio_custom7
biblio_research_notes
biblio_number_of_volumes
biblio_short_title
biblio_alternate_title
biblio_original_publication
biblio_reprint_edition
biblio_translated_title
biblio_section
biblio_citekey
biblio_coins
biblio_doi
biblio_issn
biblio_auth_address
biblio_remote_db_name
biblio_remote_db_provider
biblio_label
biblio_access_date
biblio_refereed
biblio_md5


[biblio_url] => http://hdl.handle.net/10088/8631 
[biblio_isbn] => 
[biblio_issn] => 
[title] => Marine Algae of the Northern Gulf of California: Chlorophyta and Phaeophyceae. 
[biblio_place_published] => 
[biblio_publisher] => Smithsonian Institution Scholarly Press 
[biblio_year] => 9999 
[biblio_date] => 2010-02-16 
[biblio_lang] => en 
[biblio_contributors] => 
	Array 
	( 
		[1] => Array 
		( 
			[0] => Array 
			( 
				[name] => Norris, James N. 
				[auth_type] => 1 
			) 
		) 
	) 
[biblio_keywords] => 
	Array 
	( 
		[0] => Gulf of California 
		[1] => Marine algae 
		[2] => Green algae 
		[3] => Chlorophyta 
		[4] => Brown algae 
		[5] => Phaeophyceae 
	) 
[biblio_type] => 100 
[biblio_md5] => 124fd316ef09a89930b2a13f73c56bee 
[nid] => 14122 

*/
	
  return $object;
}

/*
 *  biblio_oai_xc_isRecord - is there a record, true = yes, false = no
 */
function biblio_oai_xc_isRecord($field) 
{
	$sql = "SELECT count(*) as total FROM {biblio} where biblio_url = '".$field."'";
	
	$result = db_query($sql);
	
	$row = db_fetch_object($result);
	
	if ($row) {
		$count = $row->total;
		
		return true;
	}
	
	return false;
}

/*
 *  biblio_oai_xc_check_md5 - using the md5 of an url find the record and return count of records if found
 */
function biblio_oai_xc_check_md5($field) 
{
	$sql = "SELECT count(*) as total FROM {biblio} where biblio_md5 = '".$field."'";

  $result = db_query($sql);
	
  $row = db_fetch_object($result);
  
  if ($row) {
  	$count = $row->total;
  	
  	return $count;
  }
    
	return 0;
}

/*
 *  biblio_oai_xc_getNid - using the md5 of an url find the record and return the nid (node ID) if found
 */
function biblio_oai_xc_getNid($field) 
{
	$sql = "SELECT nid, vid, biblio_md5, biblio_url FROM {biblio} where biblio_url = '".$field."'";

  $result = db_query($sql);
	
  $row = db_fetch_object($result);
  
  if ($row) {
  	$fields['nid'] = $row->nid;
  	$fields['vid'] = $row->vid;
  	
  	return $fields;
  }

	return 0;
}

/*
 *  biblio_oai_xc_getRevision - 
 */
function biblio_oai_xc_getRevision($field) 
{
	$sql = "SELECT nid, vid FROM {biblio_contributor} where nid = '".$field."'";

  $result = db_query($sql);
	
  $row = db_fetch_object($result);
  
  if ($row) {
  	$nid = $row->nid;
  	
  	return $nid;
  }

	return 0;
}

/*
 *  biblio_oai_xc_gettypeid - 
 */
function biblio_oai_xc_gettypeid($type) 
{
	$sql = "SELECT * FROM {biblio_types} WHERE name = '".$type."'";
	$result = db_query($sql);

	if ($row = db_fetch_object($result)) {
		return $row->tid;
	}
	return;
}

/*
 *  biblio_oai_xc_parseData_Marc21 - 
 */
function biblio_oai_xc_parseData_Marc21($xmlstr)
{
	
	
	
	return $data;
}

/*
 *  biblio_oai_xc_parseData_Mods - parse a MODS format input data, output in a biblio data array
 *  strdoc is xml as string.  flag true = array output, false = object output
 */
function biblio_oai_xc_parseData_Mods($strdoc, $flag = true)
{
	$flagMakeArray = $flag;
	$flagMakeObject = ($flag ? false : true);  // if not array
	
  // MODS DATA PARSER parse data
  
  // peel data from input
  // put into variables,
  // make an array or object of the data,
  // return blob of data in ordered fashion

  //logmsg('record: ' . $strdoc, 'STRDOC');

  $strxml = str_replace('mods:', '', $strdoc);

  $xml = simplexml_load_string($strxml);

  //logmsg('title:' . $xml->titleInfo->title, 'XMLSTR');
  $data['title'] = $xml->titleInfo->title;
  
  //logmsg('url:' . $xml->identifier, 'XMLSTR');
  $biblio_url = $xml->identifier;
  
  foreach ($xml->subject as $subject) {
  	$subjects .= $subject->topic . ',';
  }

  $subjects = rtrim($subjects, ',');
  //logmsg('subjects:' . $subjects, 'XMLSTR');
	
	$biblio_isbn = '';
	$biblio_issn = '';

  $node['biblio_url']             = $biblio_url;
  $node['biblio_isbn']            = $biblio_isbn;
  $node['biblio_issn']            = $biblio_issn;
  $node['title']                  = '';
  $node['biblio_place_published'] = '';
	$node['biblio_place_published'] = '';
	$node['biblio_publisher']       = '';
  $node['biblio_year']            = 9999;
  $node['biblio_date']            = '';
  $node['biblio_lang']            = '';
  $node['biblio_contributors']    = array();
  $node['biblio_keywords']        = array();
  $node['biblio_call_number']     = '';
  $node['biblio_type']            = 100;
  $node['biblio_secondary_title'] = '';
  $node['biblio_volume']          = '';
  $node['biblio_issue']           = '';
  $node['biblio_volume']          = '';
  $node['biblio_section']         = '';
  $node['biblio_pages']           = '';
  $node['biblio_year']            = '';
  $node['biblio_md5']             = '';
  $node['nid']                    = '';
  $node['revision']               = '';

  // create an array of the data
  if ($flagMakeArray) {
	  $data = $node;
	}

  // create an object of the data
  if ($flagMakeObject) {
  	$data = convertArrayToObject($node);
  }
	
	return $data;
}

/*
 *  biblio_oai_xc_parseData_DublinCore - 
 */
function biblio_oai_xc_parseData_DublinCore($xmlstr)
{
	
	
	
	return $data;
}

// ****************************************
// ****************************************
// ****************************************
