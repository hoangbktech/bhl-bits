<?php
// $Id: xmlsitemap_engines.module,v 1.5.2.30 2009/05/06 21:49:13 kiam Exp $

/**
 * @file
 * Define actions for Google, Yahoo!, Ask, and Windows Live.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_engines_cron() {
  if (!variable_get('site_offline', 0) && variable_get('xmlsitemap_engines_cron_submit_frequency', 3600) > 0 && variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    if ((REQUEST_TIME - variable_get('xmlsitemap_engines_cron_timestamp_submit', REQUEST_TIME)) >= variable_get('xmlsitemap_engines_cron_submit_frequency', 3600)) {
      xmlsitemap_engines_ping_sitemap();
      variable_set('xmlsitemap_sitemap_is_changed', FALSE);
      variable_set('xmlsitemap_engines_cron_timestamp_submit', REQUEST_TIME);
    }
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_engines_exit() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  if (variable_get('site_offline', 0) || arg(0) == 'batch') {
    return;
  }
  if (variable_get('xmlsitemap_engines_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 1000);
    $link_count = xmlsitemap_link_count();
    if ($link_count > $chunk_size) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    if (isset($items[arg(0)]) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      watchdog('xmlsitemap', 'Sitemap downloaded by @user-agent at @address.',
        array(
          '@user-agent' => xmlsitemap_engines_search_engine_id(),
          '@address' => ip_address(),
        )
      );
    }
  }
  if (!isset($write_log) && variable_get('xmlsitemap_engines_submit', FALSE) && variable_get('xmlsitemap_sitemap_is_changed', FALSE)) {
    xmlsitemap_engines_ping_sitemap();
    variable_set('xmlsitemap_sitemap_is_changed', FALSE);
  }
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_engines_menu() {
  $items = array();
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML sitemap to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_engines_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap_engines.admin.inc',
  );
  if ($verify = variable_get("xmlsitemap_engines_google_verify", '')) {
    $items[$verify] = array(
      'title' => 'Google verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('google'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  if ($verify = variable_get("xmlsitemap_engines_yahoo_verify", '')) {
    $items[$verify] = array(
      'title' => 'Yahoo! verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('yahoo'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  if ($verify = variable_get("xmlsitemap_engines_live_verify", '')) {
    $items[$verify] = array(
      'title' => 'Windows Live verification page',
      'page callback' => 'xmlsitemap_engines_verify',
      'page arguments' => array('live'),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'xmlsitemap_engines.pages.inc',
    );
  }
  return $items;
}

/**
 * Implementation of hook_xmlsitemap_operations().
 */
function xmlsitemap_engines_xmlsitemap_operations() {
  return array(
    'submit_to_all' => array(
      'label' => t('Submit the sitemap to all the active search engines'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
    ),
    'submit_to_askcom' => array(
      'label' => t('Submit the sitemap to Ask.com'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
      'callback arguments' => array('engine' => 'ask'),
    ),
    'submit_to_google' => array(
      'label' => t('Submit the sitemap to Google'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
      'callback arguments' => array('engine' => 'google'),
    ),
    'submit_to_moreovercom' => array(
      'label' => t('Submit the sitemap to Moreover.com'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
      'callback arguments' => array('engine' => 'moreover'),
    ),
    'submit_to_live' => array(
      'label' => t('Submit the sitemap to Microsoft Live'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
      'callback arguments' => array('engine' => 'live'),
    ),
    'submit_to_yahoo' => array(
      'label' => t('Submit the sitemap to Yahoo!'),
      'callback' => 'xmlsitemap_engines_ping_sitemap',
      'callback arguments' => array('engine' => 'yahoo'),
    ),
  );
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Submit the sitemap to the selected engines.
 */
function xmlsitemap_engines_ping_sitemap($engine = NULL) {
  $engines = array(
    'ask' => array(
      'Ask.com',
      'http://submissions.ask.com/ping?sitemap=[sitemap]'
    ),
    'google' => array(
      'Google',
      'http://www.google.com/webmasters/tools/ping?sitemap=[sitemap]'
    ),
    'moreover' => array(
      'Moreover.com',
      'http://api.moreover.com/ping?u=[sitemap]'
    ),
    'live' => array(
      'Windows Live',
      'http://webmaster.live.com/ping.aspx?siteMap=[sitemap]'
    ),
    'yahoo' => array(
      'Yahoo!',
      'http://search.yahooapis.com/SiteExplorerService/V1/ping?sitemap=[sitemap]'
    ),
  );
  if (!isset($engine)) {
    foreach ($engines as $id => $info) {
      if (variable_get("xmlsitemap_engines_{$id}_submit", FALSE)) {
        xmlsitemap_engines_submit_sitemap($info[0], "xmlsitemap_engines_{$id}_url", $info[1]);
      }
    }
  }
  elseif (isset($engines[$engine])) {
    xmlsitemap_engines_submit_sitemap($engines[$engine][0], "xmlsitemap_engines_{$engine}_url", $engines[$engine][1]);
  }
}

/**
 * Return the identifier for the search engine that accessed to the sitemap,
 * or the content of $_SERVER['HTTP_USER_AGENT'].
 */
function xmlsitemap_engines_search_engine_id() {
  if (strpos($_SERVER['HTTP_USER_AGENT'], 'Googlebot') !== FALSE) {
    return 'Google';
  }
  return $_SERVER['HTTP_USER_AGENT'];
}

/**
 * Helper function for xmlsitemap_engines_ping_sitemap().
 * Submit the sitemap to the engine passed as argument, and write a message in
 * Drupal log.
 *
 * @param $engine
 *  The identifier for the search engine.
 * @param $url_var
 *  The variable name containing the submission URL used by the search engine.
 * @param $default_url
 *  The default submission URL.
 */
function xmlsitemap_engines_submit_sitemap($engine, $url_var, $default_url) {
  $url = strtr(
    variable_get($url_var, $default_url),
    array('[sitemap]' => url('sitemap.xml', array('absolute' => TRUE)))
  );
  $result = drupal_http_request($url);
  if ($result->code == 200) {
    watchdog('xmlsitemap', 'Sitemap successfully submitted to !engine.',
      array('!engine' => $engine)
    );
  }
  else {
    watchdog('xmlsitemap', 'Error occurred submitting sitemap to !engine: !code',
      array('!engine' => $engine, '!code' => 0 + $result->code), WATCHDOG_ERROR
    );
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
