#!/bin/bash

START_TIME=`date "+%H:%M:%S %Y-%m-%d%n"`
PUID=`date +%s`
WORK_DIR="/tmp/grabby.${PUID}"
SPLITS="6"

#DEST_DIR="/root/mnt/glusterfs/www"
DEST_DIR="/mnt/glusterfs/www"
DEST_USER="www-data"
DEST_GROUP="www-data"

DATE=`date +%Y%m%d.%H%M`
LOG_DIR="/var/log/grabbyd"
mkdir -p $LOG_DIR
#LOGFILE=$LOG_DIR/$DATE.log
#FAILFILE=$LOG_DIR/$DATE.fail.log

LOGFILE=$LOG_DIR/details.log
FAILFILE=$LOG_DIR/fail.log
touch ${LOGFILE}
touch ${FAILFILE}

#WWWFILE=$DEST_DIR/status/grabbyd.log
WWWFILE=${LOG_DIR}/summary.log
#mkdir -p $DEST_DIR/status
touch ${WWWFILE}
#chown $DEST_USER:$DEST_GROUP ${WWWFILE}
#chown $DEST_USER:$DEST_GROUP ${WWWFILE}
#unlink current > /dev/null
#ln -s current ${WWWFILE}
#$DEST_DIR/status/$DATE.www.log

VERSION="2.3"

#set -C

#echo $LOGFILE

echo "[`date "+%H:%M:%S"`] grabbyd ${VERSION} starting (PID $$)"
echo "[`date "+%H:%M:%S"`] grabbyd ${VERSION} starting (PID $$)" >> $LOGFILE 2>&1

#cd /tmp
mkdir ${WORK_DIR} 
cd ${WORK_DIR}

echo "[`date "+%H:%M:%S"`] Checking out latest version of iaidentifiers" 
echo "[`date "+%H:%M:%S"`] Checking out latest version of iaidentifiers" >> $LOGFILE 2>&1
#.txtgrabbyd ${VERSION} started (${PUID})"

###svn checkout http://bhl-bits.googlecode.com/svn/trunk/iaidentifiers/ . > /dev/null

if [ -d priorlists ]; then 
	rm -rf priorlists
fi

# here do the diff of the current iaidentifiers and the PREV version instead of next line
# hardcode this var for now, later list of diffs will be smaller

####csplit iaidentifiers.txt 10000 {${SPLITS}} > /dev/null
#### svn diff or ?

#DNLD_LIST="xx00"
#DNLD_LIST="/root/test_list"
DNLD_LIST="/root/xx00"

sum=0; num=1; full=`cat ${DNLD_LIST} | wc -l` 

echo "[`date "+%H:%M:%S"`] File ${DNLD_LIST} lists ${full} records to be downloaded" 
echo "[`date "+%H:%M:%S"`] File ${DNLD_LIST} lists ${full} records to be downloaded" >> $LOGFILE 2>&1
#echo "[${START_TIME}] Download of ${DNLD_LIST} starting"
echo "[`date "+%H:%M:%S"`] Download of ${DNLD_LIST} starting"
echo "[`date "+%H:%M:%S"`] Download of ${DNLD_LIST} starting" >> $LOGFILE 2>&1

#exit 0


########################################
# Start the loop
########################################
cat ${DNLD_LIST} | while read BOOK_ID
do
sum=$(($sum + $num))


	echo "[`date "+%H:%M:%S"`] Downloading (${num}/${full}) ${BOOK_ID}" 
	echo "[`date "+%H:%M:%S"`] Downloading (${num}/${full}) ${BOOK_ID}" >> $LOGFILE 2>&1
        DEST_LETTER=`echo ${BOOK_ID}|nawk '{print substr($NAME,1,1)}'`
        #echo " [ $sum/$BASE_NUM ] Copying $NAME into $DEST_DIR/$DEST_LETTER ... " >>$0.$PUID 2>&1
        #echo " [ $sum/$BASE_NUM ] Copying $NAME into $DEST_DIR/$DEST_LETTER ... "
	
#	echo "[`date "+%H:%M:%S"`]	Changing to ${DEST_DIR}/${DEST_LETTER}"
#	echo "[`date "+%H:%M:%S"`]	Changing to ${DEST_DIR}/${DEST_LETTER}" >> $LOGFILE 2>&1
	if [ ! -d ${DEST_DIR}/${DEST_LETTER} ]; then
		mkdir -p ${DEST_DIR}/${DEST_LETTER}
	fi

	cd ${DEST_DIR}/${DEST_LETTER}
	
	echo "[`date "+%H:%M:%S"`]	Downloading ${BOOK_ID} to ${DEST_DIR}/${DEST_LETTER}"
	echo "[`date "+%H:%M:%S"`]	Downloading ${BOOK_ID} to ${DEST_DIR}/${DEST_LETTER}" >> $LOGFILE 2>&1

#wget --user-agent="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)" --tries=20 --span-hosts --recursive --level=1 --continue --no-parent --no-host-directories --reject index.html --cut-dirs=2 --execute robots=off http://www.archive.org/download/${BOOK_ID} 
wget --user-agent="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)" --tries=20 --span-hosts --recursive --level=1 --continue --no-parent --no-host-directories --reject html --cut-dirs=2 --execute robots=off http://www.archive.org/download/${BOOK_ID} 

	echo "[`date "+%H:%M:%S"`]	File transfer completed" 
	echo "[`date "+%H:%M:%S"`]	File transfer completed" >> $LOGFILE 2>&1

#wget --user-agent="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)" --tries=20 --span-hosts --recursive --level=1 --continue --no-parent --no-host-directories --reject index.html --cut-dirs=2 --execute robots=off http://www.archive.org/download/${BOOK_ID} 
#wget --user-agent="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)" --tries=20 --span-hosts --recursive --level=1 --continue --no-parent --no-host-directories --reject html --cut-dirs=2 --execute robots=off http://www.archive.org/download/${BOOK_ID} 

        #cp -R $BASE_DIR/$NAME $DEST_DIR/$DEST_LETTER/ >>$0.$PUID 2>&1
        #mv -f $BASE_DIR/$NAME $DEST_DIR/$DEST_LETTER/ >>$0.$PUID 2>&1
        #rsync -ave $BASE_DIR/$NAME $DEST_DIR/$DEST_LETTER/ >>$0.$PUID 2>&1
#        chown -R $DEST_USER:$DEST_GROUP $DEST_DIR/$DEST_LETTER/$NAME >>$0.$PUID 2>&1
#        chmod -R 755 $DEST_DIR/$DEST_LETTER/$NAME >>$0.$PUID 2>&1


##echo; echo "    Generating SHA1 sums..."
	#echo "[`date "+%H:%M:%S"`]	Generating SHA1 checksums for ${BOOK_ID}"
	#echo "[`date "+%H:%M:%S"`]	Generating SHA1 checksums for ${BOOK_ID}" >> $LOGFILE 2>&1

#	shasum ${BOOK_ID}/* > /tmp/shasums_${BOOK_ID} 

##echo; echo "    Checking SHA1 sums..."; echo 
#	echo -n "[`date "+%H:%M:%S"`]	Checking SHA1 checksums for ${BOOK_ID}"
#	echo -n "[`date "+%H:%M:%S"`]	Checking SHA1 checksums for ${BOOK_ID}" >> $LOGFILE 2>&1
#shasum -c /tmp/shasums_${BOOK_ID} > /tmp/cksums_${BOOK_ID}
##if [ `grep FAILED /tmp/cksums_${BOOK_ID} | wc -l` -gt '0' ]; then
##	mv ${BOOK_ID} failed
##	mv /tmp/cksums_${BOOK_ID} failed/${BOOK_ID}
##	mv /tmp/shasums_${BOOK_ID} failed/${BOOK_ID}
	#echo "[`date "+%H:%M:%S"`]	Checksums failed for ${BOOK_ID}!!"
	#echo "[`date "+%H:%M:%S"`]	Checksums failed for ${BOOK_ID}!!" >> $FAILFILE 2>&1
#	echo "	[FAILED]"
#	echo "	[FAILED]" >> $FAILFILE 2>&1
#else
#	rm /tmp/cksums_${BOOK_ID}
#	rm /tmp/shasums_${BOOK_ID}
#	echo "	[PASSED]"
#	echo "	[PASSED]" >> $LOGFILE 2>&1
	#echo "[`date "+%H:%M:%S"`]	Checksums passed for ${BOOK_ID}"
	#echo "[`date "+%H:%M:%S"`]	Checksums passed for ${BOOK_ID}" >> $LOGFILE 2>&1
#	mv ${BOOK_ID} complete

	echo "[`date "+%H:%M:%S"`]	Setting ownership and permissions for ${BOOK_ID}"
	echo "[`date "+%H:%M:%S"`]	Setting ownership and permissions for ${BOOK_ID}" >> $LOGFILE 2>&1
        chown -R ${DEST_USER}:${DEST_GROUP} ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}

	#echo "[`date "+%H:%M:%S"`]	Setting permissions for ${BOOK_ID}"
	#echo "[`date "+%H:%M:%S"`]	Setting permissions for ${BOOK_ID}" >> $LOGFILE 2>&1
        chmod -R 755 ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}
#fi

	echo "[`date "+%H:%M:%S"`]	DOWNLOAD COMPLETED: (${num}/${full})  ${BOOK_ID}  Number of files: `ls -1 ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|wc -l`  Size of files: `du -hc ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|tail -n1`"
	echo "[`date "+%H:%M:%S"`]	DOWNLOAD COMPLETED: (${num}/${full})  ${BOOK_ID}  Number of files: `ls -1 ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|wc -l`  Size of files: `du -hc ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|tail -n1`" >> $LOGFILE 2>&1
	echo "[`date "+%H:%M:%S"`]	DOWNLOAD COMPLETED: (${num}/${full})  ${BOOK_ID}  Number of files: `ls -1 ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|wc -l`  Size of files: `du -hc ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}|tail -n1`" >> $WWWFILE 2>&1
	#echo "[`date "+%H:%M:%S"`]	Full path is ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}"
	#echo "[`date "+%H:%M:%S"`]	Full path is ${DEST_DIR}/${DEST_LETTER}/${BOOK_ID}" >> $LOGFILE 2>&1

	#exit 0



	num=$(( $num + 1 ))


done

########################################
# End loop, save download list to done
########################################
#done
#mv ${1} done/${PUID}.${1}


END_TIME=`date "+%H:%M:%S %Y-%m-%d%n"`
	echo "[`date "+%H:%M:%S"`] Run completed at ${END_TIME}"
	echo "[`date "+%H:%M:%S"`] Run completed at ${END_TIME}" >> $LOGFILE 2>&1
	echo "[`date "+%H:%M:%S"`] Run completed at ${END_TIME}" >> $WWWFILE 2>&1

#cd /tmp
rm -rf ${WORK_DIR} 

	echo "[`date "+%H:%M:%S"`] grabbyd ${VERSION} stopping (PID $$)"
	echo "[`date "+%H:%M:%S"`] grabbyd ${VERSION} stopping (PID $$)" >> $LOGFILE 2>&1
	echo "[`date "+%H:%M:%S"`] grabbyd ${VERSION} stopping (PID $$)" >> $WWWFILE 2>&1

exit 0












########################################
# Summarize downloads, time, etc
########################################
TOTAL_DATA=`du -hc complete failed | tail -n1`
TOTAL_COMPLETE=`ls complete/ | wc -l`
TOTAL_FAILED=`ls failed/ | wc -l`
START_TIME=`date "+%H:%M:%S %Y-%m-%d%n"`
END_TIME=`date "+%H:%M:%S %Y-%m-%d%n"`
START=`date +%s`
END=`date +%s`
ELAPSED=`expr $END - $START`
echo "<h3>grabby progress - completed</h3>" > status
echo "<ul>" >> status
echo "<li>Process uid was ${PUID}</li>" >> status
echo "<li>Started at ${START_TIME}</li>" >> status
echo "<li>Finished at ${END_TIME}</li>" >> status
echo "<li>${TOTAL_COMPLETE} books downloaded successfully</li>" >> status
echo "<li>${TOTAL_FAILED} books failed to download</li>" >> status
echo "<li>Download took ${ELAPSED} seconds</li>" >> status
echo "<li>Total data downloaded `du -hc complete/ failed/ | tail -n1`</li>" >> status
echo "</ul><hr>" >> status
cp status done/${PUID}.status
